"使用vimplug管理插件
call plug#begin('~/.vim/plugins')

" Plug 'zxqfl/tabnine-vim'
Plug 'Valloric/YouCompleteMe'
Plug 'plytophogy/vim-virtualenv'
Plug 'iamcco/markdown-preview.vim'
Plug 'mzlogin/vim-markdown-toc'
Plug 'joker1007/vim-markdown-quote-syntax'
Plug 'gko/vim-coloresque'
Plug 'Valloric/MatchTagAlways'
Plug 'alvan/vim-closetag'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'easymotion/vim-easymotion'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'junegunn/vim-easy-align'
Plug 'bronson/vim-trailing-whitespace'
Plug 'vim-scripts/TaskList.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline'
Plug 'kien/rainbow_parentheses.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-startify'
Plug 'vim-scripts/a.vim'
Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-git'
" Plug 'gregsexton/gitv'
" Plug 'airblade/vim-gitgutter'
Plug 'skywind3000/asyncrun.vim'
Plug 'airblade/vim-rooter'
Plug 'vim-scripts/autoload_cscope.vim'

call plug#end()

"""""""""""""""""""""""""插件配置""""""""""""""""""""""""
"*********************************
"base
"*********************************

" 鼠标
set mouse=a
set background=light
"colorscheme zenburn
colorscheme desert
" colorscheme gruvbox
" colorscheme PaperColor
" colorscheme neonwave
" colorscheme solarized

set cursorline
hi CursorLine cterm=underline ctermbg=NONE ctermfg=NONE
"set cursorcolumn
"hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
set cc=80
" '┆' " ¦, ┆, │, ⎸, ▏
set fillchars=vert:¦

set encoding=utf8
set helplang=cn
set number
set numberwidth=4
set shiftround
set relativenumber
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set showmatch
set matchtime=2
set showcmd
set title
set linebreak
set ignorecase
set incsearch
set hlsearch
set nowrap
set expandtab       " expand tab to space"
"set foldenable
let autosave=10
let mapleader=","

"let mapleader = ","
inoremap jk <esc>
inoremap ;; <esc>:
nnoremap ;; <esc>:

:command W w
:command WQ wq
:command Wq wq
:command Q q
:command Qa qa
:command QA qa

" 切换传窗口
"nnoremap sp <ESC>:sp<CR>
"nnoremap sv <ESC>:vsp<CR>

"inoremap q <esc>:close<cr>
nnoremap q <esc>:close<cr>
vnoremap q <esc>:close<cr>

" ctrl + w +hijk
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l


" 打开vim,回到上次关闭时光标所在位置
set viminfo='10,\"100,:20,%,n~/.viminfo 
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" 切换到下一个tab
"nnoremap <M-n>     gt
"nnoremap <M-p>     gT
" 关闭tab
"nnoremap <M-c>     tabc

set pastetoggle=<F2>
nmap <F4> :TagbarToggle<cr>
nmap <F5> :NERDTreeToggle<cr>
nnoremap <leader>a :Ack
nnoremap <leader>v V`]


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
  " set csprg=/usr/bin/cscope
  set csto=0
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
endif

nmap s<C-]> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap g<C-]> :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap c<C-]> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap t<C-]> :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap e<C-]> :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap f<C-]> :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap i<C-]> :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap d<C-]> :cs find d <C-R>=expand("<cword>")<CR><CR>

" ctrlp
set wildignore+=*/tmp/*,*.so,*.o,*.a,*.obj,*.swp,*.zip,*.pyc,*.pyo,*.class,.DS_Store
" " MacOSX/Linux
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'

"Rainbow parentheses for Lisp and variants
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]
let g:rbpt_max = 16
autocmd Syntax lisp,scheme,clojure,racket RainbowParenthesesToggle

set wildmenu


"*********************************
"leaderf
"*********************************

" 很强， 可以模糊搜索函数， 需要ctags
" leader f; leader b
"nnoremap <leader>f :LeaderfFile<CR>
" 最近文件
nnoremap <leader>r :LeaderfMru<CR>
"nnoremap <M-f> :LeaderfFileFullScreen<CR>
"
"nnoremap <M-b> :LeaderfBufferAll<CR>
nnoremap <M-t> :LeaderfBufTag<CR>
nnoremap <M-T> :LeaderfBufTagAll<CR>
"nnoremap <M-t> :LeaderfFunction<CR>
"nnoremap <M-T> :LeaderfFunctionAll<CR>
nnoremap <M-f> :LeaderfLine<CR>
nnoremap <M-F> :LeaderfLineAll<CR>


"*********************************
"easy-motion
"*********************************
" 当前光标前后
" <leader><leader>w b
" 搜索跳转
" <leader><leader>s
" 行级跳转
" <leader><leader>j k
" 行内跳转
" <leader><leader>h l
"
" Move to line
map <Leader><leader>L <Plug>(easymotion-bd-jk)
nmap <Leader><leader>L <Plug>(easymotion-overwin-line)

"*********************************
"nerdcommenter
"*********************************
let NERDSpaceDelims=1
" nmap <D-/> :NERDComToggleComment<cr>
let NERDCompactSexyComs=1

" Nerd Tree
let NERDChristmasTree=0
let NERDTreeWinSize=20
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
" let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos = "right"

"*********************************
"DoxygenToolkit
"*********************************
" License DoxLic
" Author DoxAuthor
" Function/Class Dox
" Group DoxBlock

let g:DoxygenToolkit_briefTag_pre = "@brief "
let g:DoxygenToolkit_templateParamTag_pre = "@tparam "
let g:DoxygenToolkit_paramTag_pre = "@param "
let g:DoxygenToolkit_returnTag = "@return "
let g:DoxygenToolkit_throwTag_pre = "@throw " " @exception is also valid
let g:DoxygenToolkit_fileTag = "@file "
let g:DoxygenToolkit_dateTag = "@date "
let g:DoxygenToolkit_authorTag = "@author "
let g:DoxygenToolkit_versionTag = "@version "
let g:DoxygenToolkit_blockTag = "@name "
let g:DoxygenToolkit_classTag = "@class "
let g:DoxygenToolkit_authorName = "fgh, redusty@163.com"
let g:doxygen_enhanced_color = 1

""" 快捷键
nnoremap <leader>d :Dox<CR>

"*********************************
"airline
"*********************************
"theme
"let g:airline_theme='base16_atelierforest'
"let g:airline_theme="papercolor"

let g:airline_powerline_fonts = 1

" tabline
let g:airline#extensions#tabline#enabled = 1

" 设置tabline的分隔
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" 设置tab路径显示格式
" default jsformatter unique_tail unique_tail_improved
let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:airline_powerline_fonts = 1


let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type= 2
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#buffers_label = 'BUFFERS'
let g:airline#extensions#tabline#tabs_label = 'TABS'

nmap <c-p> <Plug>AirlineSelectPrevTab
nmap <c-n> <Plug>AirlineSelectNextTab


au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


"*********************************
"limelight
"*********************************
" 颜色无法识别时
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

"*********************************
"tagbar
"*********************************
let g:tagbar_left=1
let g:tagbar_width=30
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
" tag for coffee
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }

  let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'sort' : 0,
    \ 'kinds' : [
        \ 'h:sections'
    \ ]
    \ }
endif

"*******************************
"whitespace
"*******************************
highlight ExtraWhitespace ctermbg=red
map <leader>w :FixWhitespace<cr>

"*****************************
"surround
"*****************************
"yss+符号添加一个符号
"ysiw+符号只对一个单词添加符号
"cs+旧的符号+新的符号，替换
"ds+符号 删除符号
"
