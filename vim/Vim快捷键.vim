MacVim快捷键

0、基本
1、移动
2、命令
3、窗口和表,及其跳转
4、寄存器的删除、复制、粘贴
5、补全
6、拼写
7、宏

0、基本
操作符+动作命令 = 操作
"."命令,每次进入插入模式到返回模式,记录每一次的按键操作,并用于重新执行

"i"在当前字符前进入插入模式
"I"->"^i"回到行首进入插入模式
"a"在当前字符后进入插入模式
"A"->"$a"到行尾进入插入模式
"o"->"A<CR>"到行尾进入插入模式,并插入新的行
"O"->"ko"到上一行的行尾进入插入模式,并插入新的行
"J"把当前行和下一行合并

"g~"反转大小写
"gu"转换为小写
"gU"转换为大写
">>"增加缩进当前行
"<<"反缩进当前行

"K"查看当前光标下单词的手册页
"zz"重绘屏幕,把当前行显示在缓冲区中央

"<C-r>a*b<CR>"a与b之间的算术结果保存到光标

"<Esc>"->"<C-[>"切换到普通模式
"<C-o>"切换到插入-普通模式

"v"进入字符的可视模式
"V"进入行的可视模式
"<C-v>进入面向块的可视模式
"gv"重选上次的可视选区
"o"可视模式下切换活动光标位置

"r"提供一个字符的替换模式就返回普通模式
"R"进入替换模式,键入的字符替换已有的字符
"qx{changes}q"执行一系列修改
"@x"重复上次的修改
"u"撤销上次的修改


1、移动
"h"左移一列
"l"右移一列
"j"下移一行
"k"上移一行
"0"移动到行首
"^"移动到行首第一个字符处
"$"移动到行尾
"gj"下移一个屏幕行
"gk"上移一个屏幕行
"g0"移动到屏幕行的行首
"g^"移动到屏幕行第一个非空字符
"g$"移动到屏幕行的行尾

"w"移动到下一个单词的词首
"b"移动到上一个单词的词首
"e"移动到下一个单词的词尾
"ge"移动到上一个单词的词尾
"W"移动到下一个字串的词首
"B"移动到上一个字串的词首
"E"移动到下一个字串的词尾
"gE"移动到上一个字词尾"

"{"移动到段首
"}"移动到段尾
"gg"移动到文档开始
"G"移动到文档结束
"ngg"->"nG"->":n"跳到第n行
"H"移动光标到屏幕顶端
"M"移动到屏幕中间
"L"移动到屏幕底部

"f{char}"向后查找匹配的char
"F{char}"向前查找匹配的char
";"继续向移动方向查找匹配的f{char}或F{char}
","回退到上一个匹配的char
"t{char}"正向移动到下一个char字符之前的字符上
"T{char}"反向移动到下一个char字符之后的字符上

以下操作需要在可视模式进行,即先按v键
"i)"选择圆括号内部区域
"i]"选择方括号内部区域
"i}"选择大括号内部区域
"i>"选择尖括号内部区域
"it"选择XML标签内部区域 
"i'"选择单引号内部区域
"i""选择双引号内部区域
"i`"选择反引号内部区域
"a)"选择圆括号整个区域
"a]"选择方括号整个区域
"a}"选择大括号整个区域
"a>"选择尖括号整个区域
"at"选择XML标签整个区域
"a'"选择单引号整个区域
"a""选择双引号整个区域
"a`"选择反引号整个区域

"iw"当前单词
"aw"当前单词和一个空格
"iW"当前字串
"aW"当前字串和一个空格
"is"当前句子
"as"当前句子和一个空格
"ip"当前段落
"ap"当前段落和一个空格

"m{a-zA-Z}"用字母标记当前光标位置,小写字母缓冲区可见,大写字母全局可见
"`{mark}"跳转到mark字母标记的位置
"``"当前缓冲区跳转之前的位置
"`."上次修改的位置
"`^"上次退出插入模式的位置
"`["上次修改或复制的起始位置
"`]"上次修改或复制的结束位置
"`<"上次高亮选区的起始位置
"`>"上次高亮选区的结束位置

2、命令
[range]->{start},{end}或可视模式的选择区域
":[range]delete [x]"删除指定范围内的行寄存到x
":[range]yank[x]"复制指定范围的行寄存到x
":[range]put[x]"在指定行后粘贴寄存器x中的内容
":[range]copy{address}":copy与t同义,把指定范围的行拷贝到address的行
":[range]move{address}"把指定范围的行移动到address的行
":[range]join"连接指定范围的行
":[range]normal{commands}对指定范围内的每一行执行普通模式命令commands
":[range]substitute/{pattern}/{string}/[flags]"对指定范围内出现pattern的地方替换为string
":[range]global/{pattern}/[cmd]"对指定范围内匹配pattern的所有行执行Ex命令cmd

":p"打印当前行
":."点代表当前行
":$"文档尾行
":%"->":0,$"当前文档的所有行,或当前文件名

"@:"命令模式重复上一次的Ex命令
"{string}<C-d>"显示可用的补全列表
"<C-r><C-w>"命令模式下复制之前缓冲区中光标下单词粘贴到命令行中
"<C-r><C-a>"命令模式下复制之前缓冲区中光标下字串粘贴到命令行中
"q:"打开命令行记录窗口
"q/"打开查找命令历史的命令行窗口
"q:"打开Ex命令历史的命令行窗口
"<C-f>"从命令行模式切换到命令行窗口

":![cmd]"调用一次shell命令
":shell"启用一个交互的shell回话
":exit"关闭这次shell交互
":read ![cmd]"把标准的输出定向到缓冲区光标处
":[range]write ![cmd]"把range内容作为指定cmd的标准输入
":[range]!{filter}"使用外部程序filter过滤指定的range
":source x.vim"对当前缓冲区行vim类型文件x里的命令
":argdo source x.vim"对参数列表里每一个文件执行x里的命令

":pwd":print working directory 打印当前缓冲区文件路径
":edit %<Tab>"当前缓冲区完整路径
":edit %.h<Tab>"当前缓冲区路径去除文件名
":[cmd] %%"%%自动生成当前缓冲区路径,没有文件名
":<C-g>"查看文件状态

":set path+=project/**"设置find命令的查找范围,可直接配置在vimrc中
":find xxx.xx"在设置好的path路径上搜索xxx.xx文件,如果存在则打开

"$vim .<CR>"命令行下打开文件管理器显示文件夹目录
":edit ."打开文件管理器显示文件件目录内容,与"edit %%"、"edit %.h<Tab>"和"$vim ."功能相同
":Explore"->"E"打开文件管理器显示文件夹目录的内容和操作指南表,如："%"新建文件、"d"新建文件夹、"D"删除、"R"重名名、"-"回到上个目录
":b"从文件管理器返回到文件内容
":!mkdir -p %:h"把文件保存不存在路径下,p使mkdir创建不存在的中间目录,%:h参考上文

":[range] global[!] /{pattern}/
"[cmd]"在某个指定模式的所有匹配行上运行Ex命令。range为作用范围,缺省状态作用整个文件。pattern为模式,缺省状态为当前查找模式。cmd为命令,缺省为:print
":global!"->":vglobal"v:invert对对没有匹配到模式的行上执行命令
":g/re/p"global命令的简写形式,在全文正则(regular expression)模式上执行命令,p为缺省命令
":g/model/yank x"将当前文件所有匹配model的模式寄存到寄存器x(a~zA~Z,小写覆盖,大写追加)
":g/model/t$"将当前文件所有匹配model的模式拷贝到文件结尾
":g/[start]/ .,[finish] [cmd]"对从start开始,到finish结束的所有文本行,执行cmd命令

3、窗口和表,及其跳转
缓冲区是读入文件的可编辑窗口
"<C-w>s"水平切分当前缓冲区,缓冲区内容相同
"<c-w>v"垂直切分当前缓冲区,缓冲区内容相同
":edit {file}"把file载入当前缓冲区
":split {file}"水平切分缓冲区,新缓冲区打开file
":vsplit {file}"垂直切分缓冲区,新缓冲区打开file
"<C-w>w"->"<C-w><C-w>"在缓冲区间循环切换
"<C-w>h"->"<C-w><C-h>"切换到左边的缓冲区
"<C-w>j"->"<C-w><C-j>"切换到下边的缓冲区
"<C-w>k"->"<C-w><C-k>"切换到上边的缓冲区
"<C-w>l"->"<C-w><C-l>"切换到右边的缓冲区
":close"->"<C-w>c"关闭当前窗口
":only"->"<C-w>o"只保留当前窗口
"<C-w>="使所有缓冲区等高等宽
"<C-w>_"最大化缓冲区高度
"<C-w>|"最大化缓冲区宽度
"[N]<C-w>_"把当前缓冲区的高度设为N行
"[N]<C-w>|"把当前缓冲区的宽度设为N列

":ls"列出内存中所有的缓冲区列表
"%"列表中的标识符%表示当前显示的缓冲区
"#"列表中的标识符#表示下次显示轮换的缓冲区
"+"列表中的标识符+表示此缓冲区被修改过了,但未保存
"h"列表中的标识符h表示此缓冲区被隐藏
":bnext"显示列表中下一个缓冲区
":bprev"显示列表中上一个缓冲区
":bfirst"显示列表中第一个缓冲区
":blast"显示列表中最后一个缓冲区
":buffer N1 N2 N3"删除第N1、N2、N3个缓冲区
":N,M bdelete",或第N到第M个缓冲区
":buffer {bufname}"跳转到第x个或指定名字的缓冲区
"!"命令后加！可以在不保存情况下跳转

":write"把缓冲区内容写入文件
":edit!"把文件内容读入缓冲区,即回滚所做修改
":qall!"关闭所有窗口,摒弃修改无需警告
":wall!"把所有改变了的缓冲区写入文件

"*"匹配0个或多个字符,局限于指定的目录
"**"匹配0个或多个字符,可递归进入指定目录的子目录
":args *.*"匹配当前目录所有格式的文件
":args **/*.*"匹配当前目录或子目录的所有格式文件

标签页为容纳一系列缓冲区窗口的容器
":tabedit {file}"在新标签页中打开file
"<C-w>T"把当前缓冲区移到一个新标签页
":tabclose"关闭当前标签页
":tabonly"关闭除当前标签页之外的标签页
":tabnext {N}"->"{N}gt"切换到第N个标签页
":tabnext"->"gt"切换都下一个标签页
":tabprevious"->"gT"切换到上一个标签页
":tabmove [N]"重排标签顺序,0为第一个,不填则排最后一个

跳转位置列表
":jumps"显示可跳转位置列表,每个缓冲区都有一个跳转列表
"<C-o>"反向遍历光标移动位置
"<C-i>"正向遍历光标移动位置
"%"跳转到匹配的括号所在处
"("跳转到上一句开头
")"跳转到下一句开头
"{"跳转到上一段开头
"}"跳转到下一段开头
"gf"跳转到光标下的文件名,go to file
"<C-]>"跳转到光标下关键字的定义之处

改变列表
":changes"显示改变列表,所有缓冲区共用
"g;"反向遍历改变列表
"g,"正向遍历改变列表
"gi"返回到上次退出插入模式的位置,并进入插入模式

ctags建立索引,浏览源码,使用ctags需要先安装,再设置$PATH,确保/usr/local/bin比/usr/bin优先
"$ctags *.format"在终端对文件夹下某一类型文件创建关键字索引
":!ctags -R"创建代码索引,从当前目录遍历子目录,最终保存在当前目录
"<C-]>"->":tag [keyword]"光标从当前关键字跳转到定义处
"g<C-]>"->":tjump [keyword]"光标出关键字显示多出匹配列表,可供选择
":tselect"在<C-]>跳转标签的地方不是想要的地方,此命令可显示标签列表
":tnext"跳到标签列表下一个索引
":tprev"跳到标签列表上一个索引
":tfirst"跳到标签列表第一个索引
":tlast"跳到标签列表最后一个索引
":tag"正向遍历标签历史
":pop"->"<C-t>"正向遍历标签历史

Quickfix列表维护一组由文件名、行号、列号与消息组成的注释定位消息,作用于全局。可由编译器、语法检查器、静态分析器或其它工具输出类似的警告信息
":make"编译当前文件,如果有错误,那么直接跳到第一处错误处
":make!"编译当前文件,有错也不跳转
":copen"打开quickfix窗口
":cclose"关闭quicfix窗口
":cnext"跳转到下一项
":cprev"跳转到上一项
":cfirst"跳转到第一项
":clast"跳转到最后一项
":cnfile"跳转到下一个文件中的第一项
":cpfile"跳转到上一下个文件的最后一项
":cc N"跳转到第N项
":cdo {cmd}"在quickfix列表中的每一行上执行cmd命令
":cfdo {cmd}"在quickfix列表中的每一个文件上执行cmd命令
":colder"回溯quickfix列表之前的版本
":cnewer"从就quickfix列表返回新版本 
位置列表,仅用于当前活动的窗口关联,用'l'开头的命令操作

4、寄存器的删除、复制、粘贴
""""无名寄存器""会在不指定使用有名寄存器的情况下被覆盖,如：删除、复制
""0"复制专用寄存器,在使用y命令复制时被覆盖
""a-"z"有名寄存器a到z,在寄存或取出时使用对应的"char"
""A-"Z"有名寄存器A到Z,使用"char"寄存器时,会把当前内容加到对用的小写字母寄存器内容之后
"_"黑洞寄存器,会直接删除寄存的内容,不可找回
""+"此寄存器对应系统剪贴板
"="表达式寄存器

以下为只读寄存器
""%"获取当前文件名
""#"下次轮换的文件名
""."上次插入的文本
"":"上次执行的Ex命令
""/"上次查找的模式

"c":change,删除当前字符进入插入模式
"C"->"c$"删除到行尾,进入插入模式
"s"->"cl"删除光标下的一个字符,进入插入模式
"S"->"^C"删除当前行,进入插入模式
"d":delete,删除
"D"->"d$"删除到行尾,不进入插入模式
"x"->"dl"删除光标下的字符
"X"删除光标前一个字符
"cc"->"S"删除后进入插入模式
"dd"删除一行
"daw"删除一个单词
"das"->"dis"删除当前段落
"cc"删除当前行进入插入模式
"caw"删除一个单词进入插入模
"<C-h>"插入模式删除前一个字符,同delete键
"<C-w>"插入模式删除前一个单词
"<C-u>"插入模式删至行首

"y":yank,复制文本到寄存器
"yy"->"Y"拷贝当前行
"+yy"复制文本到系统剪贴板
"p":put,粘贴寄存器文本到光标只后
"P"粘贴寄存器文本到光标前

"xp"交换两个字符
"ddp"交换两行

"<C-r>{register}"插入模式粘贴对应的寄存器中的文本

3、查找
"/pattern<CR>"在文档中向后查找匹配的模式
"?pattern<CR>"在文档中向前查找匹配的模式
"n"在查找方向上查找下一个匹配的模式
"N"回退到上一个匹配的模式
"gn"面向字符的可视模式,并选中下一处匹配
"gN"面向字符的可视模式,并选中上一处匹配
":noh"取消搜索高亮
"<Up>"在命令模式或查找模式中可选取上一次执行的命令
"<Down>"在命令模式或查找模式中可选取下一次执行的命令
":%s///gn"借用:substitute替换命令统计查找匹配的数目
":vimgrep //g%"借用:vimgrep命令统计查找匹配数目,并知道当前匹配的位置。%限定在当前文件查找
":cnext"正向遍历vimgrep的查找结果quickfix列表
":cprev"反向遍历vimgrep的查找结果quickfix列表
"*"查找当前光标下的单词

":set ignorecase"查找模式不区分大小写
":set smartcase"只要在查找模式中输入了大写字母,'ignorecase'失效,则按区分大小写查找
"\c"覆盖大小写敏感设置,使查找模式忽略大小写
"\C"覆盖大小写敏感设置,使查找模式强制使用大小写
"\v":very magic查找模式下去除_、a~z、A~Z、0~9之外的其它字符都使用其特殊含义
"\V":very nomagic后接字符除\需要‘\’转义,其它按照原义查找
"\x"代替的字符集0-9a-fA-F
"/\v<(\w+)>\_s+\1>"匹配相邻两个重复的单词
"\w"查找模式匹配一个单词类字符,包括字母、数字、符号‘_’
"\W"查找模式匹配除单词类字符以外的其它字符
"\_s"匹配空白字符或换行符
"<\w>"匹配一个单词用<>界定边界
"\zs"标志一个匹配的开始
"\ze""

"grep -i w*"对当前文件所在目录进行关键字w的查找,i参数指示不区分大小写(可选)。以列表显示,并保存在quickfix列表
":vim[grep] /w/g *"用vim正则引擎在当前文件所在目录(或指定文件)中查找w,保存在quickfix列表,g参数指示显示一行内所有匹配项。查找范围：*.fomart指定某一类型文件、##参数列表中的所有文件

4、替换
":[range]s[ubstitute]/{pattern}/{string}/[flags]"完整替换命令,range表示替换范围、substitute表示使用替换命令、pattern表示被替代的模式,string表示要替代的字符,flags表示标志位
":%s"%使得substitute命令在文件所有行上执行
"/g"标志位g使得substitute可在当前行范围内执行
"/c"标志位c使得substitute执行时可逐个确认修改
"/n"标志位n使得substitute执行时被抑制,仅报告匹配的个数
"/e"标志位e使得substitute执行时没有匹配情况无提示
"/&"标志位&指示重用上次的标志位

"\r"替换域插入一个换行符
"\t"替换域插入一个制表符
"\\"替换域插入一个反斜杠
"\1~\9"替换域插入对应的自匹配
"\0"->"&"替换域插入模式的所有内容
"~"替换域插入上次替换的替换词
"\{vim script}"替换域以vim script的执行结果作为替换词

"&"替换下一个匹配
"u"撤销上一个替换

逐个确认替换提示符的意思:"y/n/a/q/l/^E/^Y"
"y"替换此处匹配
"n"忽略此处匹配
"q"退出替换
"l":last替换此处匹配后退出
"a":all替换此处之后所有匹配
"<C-e>"向上滚动屏幕
"<C-y>"向下滚动屏幕

":s//x/"查找域留空,则使用上一次的查找模式
":s/<C-r>/x/"查找域使用<C-r>会使用上次的查找内容

":s//<C-r>x/"使用寄存器的内容作为替换词
":&&"重新执行替换命令,作用于当前行。前一个'&'与':'组成Ex命令,重复上次的:s命令,第二个'&'作用是重用上次':s'命令的标志位
":'<,'>&&"重新执行替换命令,作用于可视模式的高亮区
":%&&"重新执行替换命令,作用于整个文件
"g&"重新执行替换命令,作用于整个文件,相当于":%&&"的快捷键
修正&命令会忽略后面的标志位问题
"nnoremap & :&&<CR>"
"xnoremap & :&&<CR>"G

":%s/\v(<x>|<y>)/\={"x":"y","y":"x"}[submatch(1)]/g"交换x、y,可以交换更多
":vimgrep /model/ **/*.format"在整个工程中的format格式文件中查找model,查询结果保存于quickfix表
":copen"打开quickfix列表
":cgdo %s//x/gc"执行vimgrep命令后在quickfix表的所有文件上进行替换
":cfdo update"在替换后用于保存替换的文件

5、补全
":ignorecase"使大小写都能匹配,都能显示在补全列表
"<C-x><C-n>"当前缓冲区补全
"<C-x><C-i>"包含的文件补全
"<C-x><C-]>"标签文件补全
"<C-x><C-k>"字典补全
"<C-x><C-l>"整行补全
"<C-x><C-f>"文件名补全
"<C-x><C-o>"全能补全(omni)
"<C-n>"->"<Down><CR>"使用补全列表的下一个匹配
"<C-p>"->"<Up><CR>"使用补全列表的上一个匹配
"<C-y>"确认使用当前选项
"<C-e>":exit还原最早输入的文本
"<C-h>"从当前匹配项中删除一个字符
"<C-l>"从当前匹配项中增加一个字符
":ls!"加载缓冲区所有文件的关键字
":set complete=.,b,t,t,d,k "设置生成补全列表扫描的位置

6、拼写
":set spell"设置启用拼写检查
"[s"跳向下一个错误拼写项
"s]"跳向上一个错误拼写项
"z="显示光标下错误拼写项更正建议列表
"zg"把当前单词添加到拼写文件中,即确认当前单词为正确拼写
"zw"把当前单词从拼写文件中删除,即确认当前单词为错误拼写
"zug"撤销对当前单词的zg或zw命令
"setlocal spelllang=en"设置以英语为合法的拼写字典进行单词比较
"setlocal spellfile=~/.vim/spell/en.utf-8.add"此为缺省设置
"setlocal spellfile+=~/x/y.utf-8.add"此为设置自己维护的专用术语列表
如有拼写误判的单词,按1zg可保存到缺省单词表中,按2zg可保存到自己维护的专用术语列表
"<C-x>s"->"<C-x><C-s>"在插入模式下调用拼写更正列表,与补全列表相同,操作也相同,但显示内容与普通模式下z=命令的显示内容相同

7、宏
"q[a~z]"录制宏
"q"停止录制宏,录制宏从按下q[a~z]到按下q
"@[a~z]"执行某一个宏
"x@[a~z]"连续执行x次某个宏
"@@"执行上一次执行的宏
":reg"->":registes"查看所有录制的宏
":reg [a~z]"查看某一个录制的宏
"q[A~Z]"追加对应的小写字母的宏
"
"
"
"
"
"
